schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createTrullo(trullo: CreateTrulloInput): Trullo
  deleteTrullo(deletedTrullo: DeleteTrulloInput): Trullo
  createProperty(property: CreatePropertyInput): Property
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Property {
  _id: ID!
  name: String
  city: String
  street: String
  spa: Boolean!
  swimmingPool: Boolean!
  trulli: [Trullo]
}

"A connection to a list of items."
type PropertyConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PropertyEdge!]
  "A flattened list of the nodes."
  nodes: [Property]
}

"An edge in a connection."
type PropertyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Property
}

type Query {
  properties(first: Int after: String last: Int before: String where: PropertyFilterInput order: [PropertySortInput!]): PropertyConnection
  trulloById(id: String): Trullo
  trulli(first: Int after: String last: Int before: String where: TrulloFilterInput order: [TrulloSortInput!]): TrulloConnection
}

type Subscription {
  onTrulloCreate: Trullo
  onTrulloGet: Trullo
}

type Trullo {
  _id: ID!
  property_id: ID!
  name: String
  description: String
  capacity: Int!
  price: Decimal!
}

"A connection to a list of items."
type TrulloConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TrulloEdge!]
  "A flattened list of the nodes."
  nodes: [Trullo]
}

"An edge in a connection."
type TrulloEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Trullo
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableDecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal!]
  nin: [Decimal!]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input CreatePropertyInput {
  name: String
  city: String
  street: String
  spa: Boolean!
  swimmingPool: Boolean!
}

input CreateTrulloInput {
  name: String
  description: String
  capacity: Int!
  price: Decimal!
  propertyId: ID
}

input DeleteTrulloInput {
  id: ID!
}

input ListFilterInputTypeOfTrulloFilterInput {
  all: TrulloFilterInput
  none: TrulloFilterInput
  some: TrulloFilterInput
  any: Boolean
}

input PropertyFilterInput {
  and: [PropertyFilterInput!]
  or: [PropertyFilterInput!]
  _id: StringOperationFilterInput
  name: StringOperationFilterInput
  city: StringOperationFilterInput
  street: StringOperationFilterInput
  spa: BooleanOperationFilterInput
  swimmingPool: BooleanOperationFilterInput
  trulli: ListFilterInputTypeOfTrulloFilterInput
}

input PropertySortInput {
  _id: SortEnumType
  name: SortEnumType
  city: SortEnumType
  street: SortEnumType
  spa: SortEnumType
  swimmingPool: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input TrulloFilterInput {
  and: [TrulloFilterInput!]
  or: [TrulloFilterInput!]
  _id: StringOperationFilterInput
  property_id: StringOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  capacity: ComparableInt32OperationFilterInput
  price: ComparableDecimalOperationFilterInput
}

input TrulloSortInput {
  _id: SortEnumType
  property_id: SortEnumType
  name: SortEnumType
  description: SortEnumType
  capacity: SortEnumType
  price: SortEnumType
}

enum SortEnumType {
  ASC
  DESC
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The built-in `Decimal` scalar type."
scalar Decimal