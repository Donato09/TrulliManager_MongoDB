{"version":3,"sources":["GraphQL/Queries.js","Components/GetProperties.js","GraphQL/Mutations.js","Components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["LOAD_PROPERTIES","gql","GetProperties","useQuery","data","error","loading","useState","properties","setProperties","useEffect","nodes","map","item","_id","name","city","trulli","CREATE_PROPERTY_MUTATION","Form","setName","setCity","street","setStreet","setSpa","setSwimmingPool","useMutation","onSuccess","a","console","log","dataResponse","document","getElementById","text","CreatePropertyInput","type","placeholder","onChange","e","target","value","onClick","variables","inputType","spa","swimmingPool","undefined","createProperty","id","errorLink","onError","graphqlErrors","networkError","message","location","path","alert","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2ba5978f.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const LOAD_PROPERTIES = gql`\n  query {\n  properties {\n    nodes {\n      _id,\n      city,\n      name,\n      trulli {\n        _id,\n        name\n      }\n    }\n  }\n}\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_PROPERTIES } from \"../GraphQL/Queries\";\n\nfunction GetProperties() {\n  const { error, loading, data } = useQuery(LOAD_PROPERTIES);\n  const [properties, setProperties] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      setProperties(data.properties.nodes);\n    }\n    \n  }, [data]);\n\n  return (\n    <div>\n      {properties.map((item) => {\n        return (\n          <li key={item._id}>\n            Property - {item._id} - {item.name} - {item.city} \n            \n            {item.trulli.map((trulli) => {\n              return (\n              <li key={trulli._id}>\n                Trullo - {trulli._id} - {trulli.name}\n                <br></br>\n              </li> \n              )\n            })}\n            <br></br>\n          </li>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default GetProperties;\n","import { gql } from \"@apollo/client\";\n\nexport const CREATE_PROPERTY_MUTATION = gql`\n  mutation (\n    $inputType: CreatePropertyInput\n    ) {\n    createProperty (\n        property: $inputType\n    ) {\n      _id\n    }\n  }\n`;\n\n// $name: String\n// $city: String\n// $street: String\n// $spa: Boolean!\n// $swimmingPool: Boolean!\n\n// name: $name\n//         city: $city\n//         street: $street\n//         spa: $spa\n//         swimmingPool: $swimmingPool","import React, { useState } from \"react\";\nimport { CREATE_PROPERTY_MUTATION } from \"../GraphQL/Mutations\";\nimport { useMutation } from \"@apollo/client\";\n\nvar _id;\n\nfunction Form() {\n  const [name, setName] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [street, setStreet] = useState(\"\");\n  const [spa, setSpa] = useState(\"\");\n  const [swimmingPool, setSwimmingPool] = useState(\"\");\n\n  const [CreatePropertyInput, { loading, error, data: dataResponse }] = useMutation(CREATE_PROPERTY_MUTATION, {\n\n    onSuccess: async () => {\n \n      console.log(dataResponse);\n      document.getElementById(\"result\").text = dataResponse;\n \n    }});\n\n  const addProperty = () => {\n    CreatePropertyInput({\n      variables: {\n        inputType: {\n          name: name,\n          city: city,\n          street: street,\n          spa: true,\n          swimmingPool: false\n        }\n      },\n    });\n  };\n  \n  return (\n    <div>\n      <div>\n        <label>\n          Name: \n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n          />\n        </label>\n        <label>\n          City:\n          <input\n            type=\"text\"\n            placeholder=\"City\"\n            onChange={(e) => {\n              setCity(e.target.value);\n            }}\n          />\n        </label>\n        <label>\n          Street:\n          <input\n            type=\"text\"\n            placeholder=\"Street\"\n            onChange={(e) => {\n              setStreet(e.target.value);\n            }}\n          />\n        </label>\n        <label>\n          SPA:\n          <input\n            type=\"checkbox\"\n            onChange={(e) => {\n              setSpa(e.target.value);\n            }}\n          />\n        </label>\n        <label>\n          Swimming Pool:\n          <input\n            type=\"checkbox\"\n            onChange={(e) => {\n              setSwimmingPool(e.target.value);\n            }}\n          />\n        </label>\n        <button onClick={addProperty}> Create Property</button>\n      </div>\n\n      {loading && <p>Loading...</p>}\n      {error && <p>Error :( Please try again</p>}\n\n      { dataResponse != undefined &&\n          <p>Result -- {dataResponse.createProperty._id}</p>\n      } \n\n      <div id=\"result\"></div>\n    </div>\n  );   \n    \n}\n\nexport default Form;\n","import \"./App.css\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport GetProperties from \"./Components/GetProperties\";\nimport Form from \"./Components/Form\";\n\nconst errorLink = onError(({ graphqlErrors, networkError }) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({ message, location, path }) => {\n      alert(`Graphql error ${message}`);\n    });\n  }\n});\n\nconst link = from([\n  errorLink,\n  new HttpLink({ uri: \"http://localhost:4000/graphql\" }),\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      {\" \"}\n      <GetProperties />\n      <Form />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}